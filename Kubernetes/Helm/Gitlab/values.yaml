watchCluster: false

image:
  registry: registry.gitlab.com
  repository: gitlab-org/cloud-native
  name: gitlab-operator
  # tag: latest
  # digest:
  # pullPolicy: IfNotPresent
  # pullSecrets: []
  prepend: "false"

nameOverride: "gitlab"
fullnameOverride: ""

extraEnvs: []

podAnnotations:
  kubectl.kubernetes.io/default-container: manager

resources:
  limits:
    cpu: 200m
    memory: 300Mi
  requests:
    cpu: 200m
    memory: 100Mi

affinity: {}
nodeSelector: {}
tolerations: []

manager:
  debug:
    enabled: true
  kubeRbacProxy:
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 5m
        memory: 64Mi
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the name template
    # name:
  webhook:
    selfSignedCert:
      # Specifies whether CertManager Issuer and Certificate should be created
      # to generate a self-signed certificate for the Manager's webhook.
      create: true

  ## Controller containers' Security Context (only main container)
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext: {}
    # Switch to allow priviledge escalation on the Controller container
    # allowPrivilegeEscalation: 
    # capabilities
    #   Linux Kernel capabilities that should be dropped
    #   drop:
    #   Linux Kernel capabilities that should be added
    #   add:
    # Set container's Security Context runAsNonRoot
    # runAsNonRoot:
app:
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the name template
    # name:

nginx-ingress:
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the name template
    # name:

prometheus:
  serviceAccount:
    server:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the name template
      # name:

scc: {}
#  apiVersion: ""

cert-manager:
  install: false
